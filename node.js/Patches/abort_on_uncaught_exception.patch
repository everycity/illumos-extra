diff --git a/deps/v8/src/flag-definitions.h b/deps/v8/src/flag-definitions.h
index 6bb1507..dfa293d 100644
--- a/deps/v8/src/flag-definitions.h
+++ b/deps/v8/src/flag-definitions.h
@@ -414,6 +414,8 @@ DEFINE_int(sim_stack_alignment, 8,
            "Stack alingment in bytes in simulator (4 or 8, 8 is default)")
 
 // isolate.cc
+DEFINE_bool(abort_on_uncaught_exception, false,
+            "abort program (dump core) when an uncaught exception is thrown")
 DEFINE_bool(trace_exception, false,
             "print stack trace when throwing exceptions")
 DEFINE_bool(preallocate_message_memory, false,
diff --git a/deps/v8/src/isolate.cc b/deps/v8/src/isolate.cc
index 8fcb370..189c76a 100644
--- a/deps/v8/src/isolate.cc
+++ b/deps/v8/src/isolate.cc
@@ -1053,6 +1053,7 @@ bool Isolate::IsErrorObject(Handle<Object> obj) {
   return false;
 }
 
+static int fatal_exception_depth = 0;
 
 void Isolate::DoThrow(Object* exception, MessageLocation* location) {
   ASSERT(!has_pending_exception());
@@ -1123,6 +1124,35 @@ void Isolate::DoThrow(Object* exception, MessageLocation* location) {
         thread_local_top()->pending_message_start_pos_ = location->start_pos();
         thread_local_top()->pending_message_end_pos_ = location->end_pos();
       }
+
+      // If the abort-on-uncaught-exception flag is specified, abort on any
+      // exception not caught by JavaScript, even when an external handler is
+      // present.  This flag is intended for use by JavaScript developers, so
+      // print a user-friendly stack trace (not an internal one).
+      if (fatal_exception_depth == 0 &&
+          FLAG_abort_on_uncaught_exception &&
+          (report_exception || can_be_caught_externally)) {
+	fatal_exception_depth++;
+        fprintf(stderr, "UNCAUGHT EXCEPTION: ");
+	exception->ShortPrint(stderr);
+
+	if (IsErrorObject(exception_handle)) {
+	  Handle<String> key = factory()->LookupAsciiSymbol("message");
+	  MaybeObject *maybeMessage =
+	    JSObject::cast(*exception_handle)->GetProperty(*key);
+	  Object *messageObject;
+	  if (maybeMessage->ToObject(&messageObject)) {
+	    String *message = String::cast(messageObject);
+	    fprintf(stderr, "\nEXCEPTION MESSAGE: ");
+	    message->PrintOn(stderr);
+	  }
+	}
+
+	fprintf(stderr, "\nFROM:\n");
+        PrintCurrentStackTrace(stderr);
+        OS::Abort();
+      }
+
     } else if (location != NULL && !location->script().is_null()) {
       // We are bootstrapping and caught an error where the location is set
       // and we have a script for the location.
